#
# Makefile for "other" implemented platforms.
#
# * Copyright 2013-2015 by Bill Westfield.  Part of Optiboot.
# * This software is licensed under version 2 of the Gnu Public Licence.
# * See optiboot.c for details.
#

#
# Extra chips (maybe) supported by optiboot
# Note that these are usually only minimally tested.
#

#
################################################
# generic atmega88
# let board specific change the frequency and fuses
ifndef TARGET
atmega88: TARGET := atmega88
endif
atmega88: MCU_TARGET := atmega88
ifndef AVR_FREQ
atmega88: AVR_FREQ := 16000000 
endif
atmega88: FLASH_SIZE := 8192
atmega88: BOOT_PAGE_LEN := 256
ifndef HFUSE
# 2.7V brownout
atmega88: HFUSE := DD
endif
ifndef LFUSE
# Low power xtal (16MHz) 16KCK/14CK+65ms
atmega88: LFUSE := FF
endif
ifndef EFUSE
# 512 byte boot
atmega88: EFUSE := 04
endif
atmega88: isp

atmega88_isp: 
	$(MAKE) atmega88 ISP=1

atmega88p_isp: TARGET := atmega88p
atmega88p_isp: MCU_TARGET := atmega88p
atmega88p_isp: 
	$(MAKE) atmega88 ISP=1

#
# ATmega168p [QFN32]
#

atmega168p_lp_isp: TARGET := atmega168p_lp
# 2.7V brownout
atmega168p_lp_isp: HFUSE := DD
# Low power xtal (16MHz) 16KCK/14CK+65ms
atmega168p_lp_isp: LFUSE := FF
# 512 byte boot
atmega168p_lp_isp: EFUSE := 04
atmega168p_lp_isp: 
	$(MAKE) atmega168p ISP=1

#
# ATmega32
################################################
# generic atmega32
# let board specific change the frequency and fuses
ifndef TARGET
atmega32: TARGET := atmega32
endif
atmega32: MCU_TARGET := atmega32
ifndef AVR_FREQ
atmega32: AVR_FREQ := 11059200
endif
atmega32: FLASH_SIZE := 32768
atmega32: BOOT_PAGE_LEN := 512
ifndef HFUSE
# No OCD or JTAG, SPIEN, CKOPT (for full swing xtal), Bootsize=512B
atmega32: HFUSE := CE
endif
ifndef LFUSE
# 2.7V brownout, 16MHz Xtal, 16KCK/14CK+65ms
atmega32: LFUSE := BF
endif
atmega32: isp

atmega32_isp: 
	$(MAKE) atmega32 ISP=1



#
# ATtiny84
################################################
# generic attiny84
# let board specific change the frequency and fuses
attiny84: TARGET := attiny84
attiny84: MCU_TARGET := attiny84
ifndef AVR_FREQ
attiny84: AVR_FREQ := 8000000
endif
attiny84: FLASH_SIZE := 8192
# use the flash page size of tiny84 to prevent unaligned Start-Address
attiny84: BOOT_PAGE_LEN := 64
attiny84: VIRTUAL_BOOT_PARTITION := 1
attiny84: COMMON_OPTIONS += -DSOFT_UART -DVIRTUAL_BOOT_PARTITION -Dsave_vect_num=4
# The loader option --gc-sections remove the .text part!
#attiny84: LDSECTIONS = -Wl,--gc-sections -Wl,--undefined=optiboot_version

ifndef HFUSE
## Brownout disabled
#attiny84: HFUSE := DF
# Brownout 2.7V
attiny84: HFUSE := DD
endif

ifndef LFUSE
# 8MHz internal oscillator, slowly rising power
#attiny84: LFUSE := E2
## 8MHz internal oscillator, slowly rising power, Clock out
#attiny84: LFUSE := A2
# 8MHz crystal, slowly rising power
attiny84: LFUSE := FF
endif

# Self-programming enable
attiny84: EFUSE := FE
attiny84: isp



# 1MHz clocked platforms/boards
#
# These are capable of 9600 baud
#

luminet: TARGET := $@
luminet: AVR_FREQ := 1000000
luminet: LED_START_FLASHES := 0
luminet: BAUD_RATE := 9600
# 1MHz internal oscillator, slowly rising power, requires AVR_FREQ set to 1000000
luminet: LFUSE := 62
luminet:
	$(MAKE) attiny84

luminet_isp: 
	$(MAKE) luminet ISP=1


