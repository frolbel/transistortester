# Makefile.isp for Optiboot
# Bill Westfield (WestfW@yahoo.com)  March, 2013
# $Id$
#
# Instructions:
#
# This is a "daughter" Makefile that burns the bootloader using a ISP
# device programmer.  It is designed to inherit assorted variables from
# the parent optiboot "Makefile"...  Using a daughter makefile makes
# certain variable manipulations more obvious.
#
# To burn bootloader .hex file, invoke the main Makefile using:
# make diecimila_isp
# make lilypad_isp
# make ng_isp
# etc...
#
#
# Note: inherit paths/etc from parent Makefile.
#
#---------------------------------------------------------------------------
# 
# * Copyright 2013-2015 by Bill Westfield.  Part of Optiboot.
# * This software is licensed under version 2 of the Gnu Public Licence.
# * See optiboot.c for details.
# 
#---------------------------------------------------------------------------

# enter the parameters for the avrdude isp tool  -b19200
#

# Inherit avrdude paths from top-level makefile
AVRDUDE_ROOT ?= $(GCCROOT)
AVRDUDE_CONF ?= -C$(TOOLROOT)/avr/etc/avrdude.conf

# These are the parameters for a usb-based STK500v2 programmer.
# Exact type unknown.  (historical Makefile values.)
ISPTOOL	   = stk500v2
ISPPORT	   =  usb
ISPSPEED   = -b 115200
#
#
# These are parameters for using an Arduino with the ArduinoISP sketch
#  as the programmer.  On a mac, for a particular Uno as programmer.
#ISPTOOL	?= stk500v1
#ISPPORT	?= /dev/tty.usbmodemfd3141 
#ISPSPEED ?= -b19200
ifndef TARGET
 $(error the actual TARGET name is not known)
endif
ifndef FLASH_SIZE
 $(error This makefile should only be called from inside the main optiboot Makefile to get actual fuse data)
endif
ifndef BOOT_PAGE_LEN
 $(error This makefile should only be called from inside the main optiboot Makefile to get actual fuse data)
endif
#ifdef MCU_TARGET
# $(error the actual MCU_TARGET value is not known!)
#endif


# Not all chips have EFUSE.

ifdef EFUSE
EFUSE_CMD= -U efuse:w:0x$(EFUSE):m
EF_dep = EFUSE.dat
else
EF_dep = 
endif

#
# avrdude commands to erase chip, unlock memory, and program fuses.
#
#  the lock bits can only be activated by writing a 0 bit, bits can be only set with chip erase!
#ISPFUSES =	-e -u -U lock:w:0x3f:m $(EFUSE_CMD) \
#	 	-U hfuse:w:0x$(HFUSE):m -U lfuse:w:0x$(LFUSE):m
ifeq ($(MCU_TARGET), attiny84)
    # no fuse correction, no Bootloader feature present
ISPFUSES =	-e -u $(EFUSE_CMD) -U hfuse:w:0x$(HFUSE):m -U lfuse:w:0x$(LFUSE):m
USE_Edat := 2
else
   # most processors have the Bootloader bits BOOTSZ in the HFUSE.
ISPFUSES =	-e -u $(EFUSE_CMD) -U hfuse:w:0x$(shell cat HFUSE.dat):m -U lfuse:w:0x$(LFUSE):m
USE_Edat := 0
endif
ifeq ($(MCU_TARGET), atmega48)
ISPFUSES =	-e -u -U efuse:w:0x$(shell cat EFUSE.dat):m -U hfuse:w:0x$(HFUSE):m -U lfuse:w:0x$(LFUSE):m
USE_Edat := 1
endif
ifeq ($(MCU_TARGET), atmega48p)
ISPFUSES =	-e -u -U efuse:w:0x$(shell cat EFUSE.dat):m -U hfuse:w:0x$(HFUSE):m -U lfuse:w:0x$(LFUSE):m
USE_Edat := 1
endif
ifeq ($(MCU_TARGET), atmega88)
ISPFUSES =	-e -u -U efuse:w:0x$(shell cat EFUSE.dat):m -U hfuse:w:0x$(HFUSE):m -U lfuse:w:0x$(LFUSE):m
USE_Edat := 1
endif
ifeq ($(MCU_TARGET), atmega88p)
ISPFUSES =	-e -u -U efuse:w:0x$(shell cat EFUSE.dat):m -U hfuse:w:0x$(HFUSE):m -U lfuse:w:0x$(LFUSE):m
USE_Edat := 1
endif
ifeq ($(MCU_TARGET), atmega168)
ISPFUSES =	-e -u -U efuse:w:0x$(shell cat EFUSE.dat):m -U hfuse:w:0x$(HFUSE):m -U lfuse:w:0x$(LFUSE):m
USE_Edat := 1
endif
ifeq ($(MCU_TARGET), atmega168p)
ISPFUSES =	-e -u -U efuse:w:0x$(shell cat EFUSE.dat):m -U hfuse:w:0x$(HFUSE):m -U lfuse:w:0x$(LFUSE):m
endif


#
# avrdude commands to program the new bootloader, and protect the bootloader
# space from accidental SPM writes.  Note: "2f" allows boot section to be read
# by the application, which is different than the arduino default.
#
ifeq ($(MCU_TARGET), attiny84)
# no disable for ATtiny84
ISPFLASH =	-U flash:w:$(PROGRAM)_$(TARGET).hex -U lock:w:0xff:m
else
ISPFLASH =	-U flash:w:$(PROGRAM)_$(TARGET).hex -U lock:w:0x2f:m
endif
#
# HFUSE.dat is only referenced by isp:
# The command line calls make use of the cat, echo and bc instructions.
# The echo is used to produce the arithmetic formula for the bc function.
# Input and output of the bc function is set to hex format (base 16).
# Because the bc has no arithmetic and function to clear the BOOTSZ bits,
# a (($(HFUSE) && 2)*2) like subtraction is used to clear both bits.
# The BOOTSZ.dat is created from the real .text length of the bootloader
# and the $(BOOT_PAGE_LEN) variable of the Makefile.
# BOOTSZ.dat = 00 for one boot-page, 01 for two boot-pages,
#              10 for four boot-pages and 11 for eight boot-pages.
# The boot-page length is usually 256, 512 or 1024 bytes. 
# The atmega48/88/168 use the extended fuse for setting the boot length.
# Therefore both values (HFUSE and EFUSE) are estimated, but
# the right one is selected by the $(ISPFUSES) variable.
UC_HFUSE := $(shell echo $(HFUSE) | tr a-z A-Z)
UC_EFUSE := $(shell echo $(EFUSE) | tr a-z A-Z)
HFUSE.dat:	$(PROGRAM)_$(TARGET).hex BOOTSZ.dat
	@echo "$(shell echo "obase=16;ibase=16;($(UC_HFUSE) - ((($(UC_HFUSE)/2) % 4)*2) ) + ($(shell cat BOOTSZ.dat)*2)" | bc)" > HFUSE.dat
EFUSE.dat:	$(PROGRAM)_$(TARGET).hex BOOTSZ.dat
	@echo "$(shell echo "obase=16;ibase=16;(0$(UC_EFUSE) - (((0$(UC_EFUSE)/2) % 4)*2) ) + ($(shell cat BOOTSZ.dat)*2)" | bc)" > EFUSE.dat

ifdef EFUSE
FuseSetPrint:	$(PROGRAM)_$(TARGET).hex $(PROGRAM)_$(TARGET).lst
	@echo "Fuses in Makefile.isp are set to lfuse=0x$(LFUSE), hfuse=0x$(HFUSE), efuse=0x$(EFUSE) for $(MCU_TARGET)"
	@echo "\n; $(ISPFUSES)" >> $(PROGRAM)_$(TARGET).lst
else
FuseSetPrint:	$(PROGRAM)_$(TARGET).hex $(PROGRAM)_$(TARGET).lst
	@echo "Fuses in Makefile.isp are set to lfuse=0x$(LFUSE), hfuse=0x$(HFUSE) for $(MCU_TARGET)"
	@echo "\n; $(ISPFUSES)" >> $(PROGRAM)_$(TARGET).lst
endif

ifeq ($(USE_Edat), 1)
FuseChangePrint: EFUSE.dat BL_StartAdr.dat
	@echo "Bootloader Fuse is EFUSE = 0x$(shell cat EFUSE.dat) [0x$(EFUSE)], BootLoader Start at 0x$(shell cat BL_StartAdr.dat) $(shell echo "ibase=16; if (($(UC_EFUSE) % 2) == 0) print \"is enabled\" else print \"is NOT enabled, start at 0!\" " | bc) "
endif
ifeq ($(USE_Edat), 0)
FuseChangePrint: HFUSE.dat  BL_StartAdr.dat
	@echo "Bootloader Fuse is HFUSE = 0x$(shell cat HFUSE.dat) [0x$(HFUSE)], BootLoader Start at 0x$(shell cat BL_StartAdr.dat) $(shell echo "ibase=16; if (($(UC_HFUSE) % 2) == 0) print \"is enabled\" else print \"is NOT enabled, start at 0!\" " | bc) "
endif
ifeq ($(USE_Edat), 2)
FuseChangePrint:  BL_StartAdr.dat
	@echo "BootLoader Start Address is 0x$(shell cat BL_StartAdr.dat), application program end address must be lower! "
endif

# There are certain complicated caused by the fact that the default state
# of a fuse is a "1" rather than a "0", especially with respect to fuse bits
# that have not been implemented.  Those would normally not be included, but
# unimplemented fuses still default to being "1"
#
# the efuse should really be 0xf8; since, however, only the lower
# three bits of that byte are used on the atmega168, avrdude gets
# confused if you specify 1's for the higher bits, see:
# http://tinker.it/now/2007/02/24/the-tale-of-avrdude-atmega168-and-extended-bits-fuses/
#
# similarly, the lock bits should be 0xff instead of 0x3f (to
# unlock the bootloader section) and 0xcf instead of 0x2f (to
# lock it), but since the high two bits of the lock byte are
# unused, avrdude would get confused.

isp: $(PROGRAM)_$(TARGET).hex FuseSetPrint FuseChangePrint HFUSE.dat $(EF_dep) 
	$(AVRDUDE_ROOT)avrdude $(AVRDUDE_CONF) -c $(ISPTOOL) \
              -p $(MCU_TARGET) -P $(ISPPORT) $(ISPSPEED) \
              $(ISPFUSES) \
              $(ISPFLASH)
#
#Test Output
#isp: $(PROGRAM)_$(TARGET).hex HFUSE.dat
#	@echo abhaengig von $(PROGRAM)_$(TARGET).hex
#	@echo AVRDUDE_CONF = $(AVRDUDE_CONF)
#	@echo LFUSE = $(LFUSE)
#	@echo HFUSE = $(HFUSE)
#	@echo MCU_TARGET = $(MCU_TARGET)
#	@echo ISP_FUSES = $(ISPFUSES)
